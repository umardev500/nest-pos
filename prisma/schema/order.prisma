model OrderType {
    id          Int     @id @default(autoincrement())
    merchant_id Int
    name        String  @unique // e.g., 'DINE_IN', 'TAKEAWAY'
    label       String // Optional: user-friendly label like 'Dine In'
    enabled     Boolean @default(true) // Whether this type is currently available

    // Relationships
    merchant Merchant @relation(fields: [merchant_id], references: [id], onDelete: Cascade)

    orders Order[]
}

enum OrderStatus {
    PENDING
    PARTIALLY_PAID
    PAID
    CANCELLED
    COMPLETED
}

model Order {
    id             Int           @id @default(autoincrement())
    merchant_id    Int
    order_type_id  Int
    status         OrderStatus   @default(PENDING)
    total_amount   Float
    discount_type  DiscountType? // Snapshot of discount type (e.g., PERCENT, FIXED)
    discount_value Float? // Snapshot of discount value (e.g., 10.0 = 10% or 10 fixed)
    down_payment   Float?

    paid_at    DateTime?
    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt

    // Relationships
    merchant   Merchant    @relation(fields: [merchant_id], references: [id], onDelete: Cascade)
    order_type OrderType   @relation(fields: [order_type_id], references: [id])
    order_item OrderItem[]
    payment    Payment[]
}

model OrderItem {
    id             Int           @id @default(autoincrement())
    order_id       Int
    product_id     Int
    variant_id     Int? // Optional if variants are used
    unit_id        Int
    quantity       Int
    price          Float // price per item (in case of discounts at time of purchase)
    subtotal       Float // price * quantity
    discount_value Float?
    discount_type  DiscountType?

    order   Order           @relation(fields: [order_id], references: [id], onDelete: Cascade)
    product Product         @relation(fields: [product_id], references: [id])
    variant ProductVariant? @relation(fields: [variant_id], references: [id])
    unit    Unit            @relation(fields: [unit_id], references: [id])
}

model Payment {
    id       Int      @id @default(autoincrement())
    order_id Int
    amount   Float
    method   String
    paid_at  DateTime @default(now())

    order Order @relation(fields: [order_id], references: [id], onDelete: Cascade)
}
